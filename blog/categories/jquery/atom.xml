<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jquery | Proven Style]]></title>
  <link href="http://provenstyle.github.io/blog/categories/jquery/atom.xml" rel="self"/>
  <link href="http://provenstyle.github.io/"/>
  <updated>2015-10-02T18:15:39-05:00</updated>
  <id>http://provenstyle.github.io/</id>
  <author>
    <name><![CDATA[Michael Dudley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using apply in JavaScript]]></title>
    <link href="http://provenstyle.github.io/blog/2014/01/06/using-apply-to-call-a-function-in-javascript/"/>
    <updated>2014-01-06T18:33:00-06:00</updated>
    <id>http://provenstyle.github.io/blog/2014/01/06/using-apply-to-call-a-function-in-javascript</id>
    <content type="html"><![CDATA[<p>Today I went a little deeper into JavaScript! The problem I was facing was:</p>

<blockquote><p>&ldquo;How do I call a function and provide the arguments as an array instead of a comma separated list?&rdquo;</p></blockquote>

<p>My arguments were not know until runtime and there could be 0 to 4 arguments.</p>

<h2>Function.prototype.apply() to the rescue</h2>

<p>The apply() method lets you invoke a function with arguments as an array.</p>

<p>Here I am making a service call to stopStreaming for every vehicle in my array.  This service call returns a promise that I push into an array.  I can then use <code>$.when.apply(this, promises).always()</code> to wait for <em>all</em> the calls to return before I resolve my deferred.</p>

<p>Here is the full code.</p>

<pre><code>vm.stopAll = function () {
  var deferred = $.Deferred();
  var promises = [];
  for (var i = 0; i &lt; streamingVehicles.selectedVehicles.length; i++) {
     var vehicle = streamingVehicles.selectedVehicles[i];
     var promise = stopStreaming(vehicle);
     promises.push(promise);
  }

  $.when.apply(this, promises).always(function() {
     deferred.resolve();
  });

  return deferred.promise();
};
</code></pre>

<p>Incidentally, this is also a nice demonstration of using the promise pattern and the jQuery Deferred object.</p>
]]></content>
  </entry>
  
</feed>
