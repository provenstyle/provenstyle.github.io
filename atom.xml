<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Proven Style]]></title>
  <link href="http://provenstyle.github.io/atom.xml" rel="self"/>
  <link href="http://provenstyle.github.io/"/>
<<<<<<< HEAD
  <updated>2014-01-04T13:52:05-06:00</updated>
=======
  <updated>2014-01-04T12:50:00-06:00</updated>
>>>>>>> 679326409615c3ff71135f9438899bd5b56cc2fa
  <id>http://provenstyle.github.io/</id>
  <author>
    <name><![CDATA[Michael Dudley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Durandal - system.js]]></title>
    <link href="http://provenstyle.github.io/blog/2014/01/04/durandal-system-dot-js/"/>
    <updated>2014-01-04T12:36:00-06:00</updated>
    <id>http://provenstyle.github.io/blog/2014/01/04/durandal-system-dot-js</id>
    <content type="html"><![CDATA[<p>The Durandal core is made up of 8 modules.  The system.js module provides core functionality to Durandal and it is also useful for any custom modules we write in our own apps.</p>

<h3>Features</h3>

<ul>
<li>Logging</li>
<li>Debug mode</li>
<li>Object Type Testing</li>
<li>noop function</li>
<li>console.log polyfill</li>
<li>Object.keys polyfill</li>
<li>gets and sets the __moduleId__ of an object</li>
<li>Creates seam to use your preferred promise implementation</li>
</ul>


<h3>Architecture</h3>

<ul>
<li>AMD Module</li>
<li>system is an object literal. There is only one instance.</li>
<li>Lines: 427</li>
<li>Documentation is done with <a href="https://github.com/yui/yuidoc">YUIDoc &ndash; Javascript Documentation Tool</a></li>
</ul>


<h3>Dependencies</h3>

<ul>
<li>requireJs</li>
<li>jQuery</li>
<li>No other durandal dependencies</li>
<li>Every module in durandal depends on system</li>
</ul>


<h2>Debug mode</h2>

<pre><code>system.debug(true); 
</code></pre>

<ul>
<li>turns debug mode on</li>
<li>logs to the console and throw errors</li>
</ul>


<p>Debug is off by default</p>

<pre><code>system.debug(false);
</code></pre>

<ul>
<li>turns debug mode off</li>
<li>no logging and no error throwing</li>
<li>uses the noop function until turned on</li>
</ul>


<h2>Interesting uses of JavaScript</h2>

<h4>Reflection</h4>

<pre><code>Object.keys(obj);

Returns an array of strings representing all the enumerable property names of the object
</code></pre>

<h4>Make shortcuts to native JavaScript functions</h4>

<pre><code> var nativeKeys = Object.keys,
     hasOwnProperty = Object.prototype.hasOwnProperty,
     toString = Object.prototype.toString,
     nativeIsArray = Array.isArray,
     slice = Array.prototype.slice;
</code></pre>

<h4>The noop function (No Operation)</h4>

<pre><code> var noop = function() { };

 Define a function that does nothing and set it as a default 
 to be replaced later during configuration if desired.
</code></pre>

<h4>Arguments and parameters</h4>

<p>You can refer to a functions parameters by name or by using the arguments array</p>

<p>Test the number of arguments and take different actions.</p>

<pre><code>if (arguments.length == 1) {};
</code></pre>

<p>Refer to arguments by index</p>

<pre><code>var first = arguments[0];       
</code></pre>

<p>Accept n number of arguments in a function.</p>

<pre><code>function(obj) {         

    //do something with obj

    var rest = slice.call(arguments, 1);    
    for (var i = 0; i &lt; rest.length; i++) {
        var source = rest[i];

        if (source) {
            //do something with the rest of the arguments
        }
    }
}
</code></pre>

<h2>Public Api</h2>

<p><a href="http://durandaljs.com/documentation/api/#module/system">Official system.js documentation is here >></a></p>

<h4>My summary of the api</h4>

<pre><code>version - durandal version
noop - no operation function
getModuleId - gets \_\_moduleId\_\_
setModuleId - sets \_\_moduleId\_\_
resolveObject - returns either the object or news it up from a function
debug - turns debug mode on and off
log - logs to console. noop by default
error - noop by default
assert - throws and error only in debug mode
defer - wraps the jquery defer.  Lets you replace it with a different implementation
guid - simple guid
acquire - returns modules from requireJs
extend - copies properties from n number of functions onto an object and returns the extended object
wait - waits specified number of seconds and returns a promise
keys- polyfills the getKeys behavior
</code></pre>

<h3>is Functions to test object types</h3>

<pre><code>isElement
isArray
isObject
isBoolean
isPromise
isArguments
isFunction
isString
isNumber
isDate
isRegExp
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Registering ASP.NET in IIS]]></title>
    <link href="http://provenstyle.github.io/blog/2013/08/19/registering-asp-dot-net/"/>
    <updated>2013-08-19T16:32:00-05:00</updated>
    <id>http://provenstyle.github.io/blog/2013/08/19/registering-asp-dot-net</id>
    <content type="html"><![CDATA[<p>Every time I have set up a new development environment in the last three years I have forgotten to register Asp.net with IIS.  When I was first learning it would derail me for a quite a while.  I have done it so many times now that I recognize what is going on when I see the errors, but it is still irritating.  What was that command again?  I am putting it here so I never have to Google it again!</p>

<pre><code>aspnet_regiis
</code></pre>

<p>&ldquo;Not a recognized command!&rdquo; you say?
Yes, you have to change directories into the .net version that you are using.</p>

<pre><code>cd C:\Windows\Microsoft.NET\Framework\v4.0.30319
</code></pre>

<p>Now run the command.</p>

<p>What? That didn&rsquo;t do it either?  Don&rsquo;t forget to add the install flag.</p>

<pre><code>aspnet_regiis -i
</code></pre>

<p>Still not working?  Don&rsquo;t forget to start your command prompt as admin, and yes now you have to cd directories all over again into your .net version.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Permissions For Your App Pool]]></title>
    <link href="http://provenstyle.github.io/blog/2013/07/31/setting-permissions-for-your-app-pool/"/>
    <updated>2013-07-31T08:37:00-05:00</updated>
    <id>http://provenstyle.github.io/blog/2013/07/31/setting-permissions-for-your-app-pool</id>
    <content type="html"><![CDATA[<p>How the heck do you reference an IIS application pool user when you need to give it access to a directory?  I never can remember either! I flounder around trying different combinations.  I question whether it needs quotes.  I look for the right stack overflow question and never seem to find it.  So here it is for you and I to remember.  Don&rsquo;t worry about the spaces and no need for quotation marks.</p>

<pre><code>IIS AppPool\application pool name
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Clean]]></title>
    <link href="http://provenstyle.github.io/blog/2013/07/13/git-clean/"/>
    <updated>2013-07-13T13:48:00-05:00</updated>
    <id>http://provenstyle.github.io/blog/2013/07/13/git-clean</id>
    <content type="html"><![CDATA[<p>I love finding new commands for git that make my life simpler.  I added a new git command to my tool belt today.</p>

<pre><code>git clean -d -f
</code></pre>

<p>git clean removes files and directories that are not being tracked by git.  It is really useful for deleting the Visual Studio artifacts that hang around even if they are not being used.  It is amazing how may problems can be solved with your solution just by deleting the bin folder and recreating it.  I find this especially true when I do sweeping refactorings in my solution.</p>

<p>-n Will do a dry run. It doesn&rsquo;t remove anything it just tells you what it would delete.</p>

<p>-d Tells git to remove directories</p>

<p>-f Forces the delete</p>

<p>To delete files only and not the directories</p>

<pre><code>git clean -f
</code></pre>
]]></content>
  </entry>
  
</feed>
